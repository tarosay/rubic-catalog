Ext.data.JsonP.Peridot_I2CMaster({"tagname":"class","name":"Peridot.I2CMaster","autodetected":{"aliases":true,"alternateClassNames":true,"extends":true,"mixins":true,"requires":true,"uses":true,"members":true,"code_type":true},"files":[{"filename":"i2cmaster.js","href":null}],"aliases":{},"alternateClassNames":[],"extends":"Hardware.I2CMaster","mixins":[],"requires":[],"uses":[],"members":[{"name":"channel","tagname":"property","owner":"Hardware.I2CMaster","id":"property-channel","meta":{"readonly":true}},{"name":"clock","tagname":"property","owner":"Hardware.I2CMaster","id":"property-clock","meta":{}},{"name":"configure","tagname":"method","owner":"Hardware.I2CMaster","id":"method-configure","meta":{"chainable":true}},{"name":"transfer","tagname":"method","owner":"Hardware.I2CMaster","id":"method-transfer","meta":{}},{"name":"new","tagname":"method","owner":"Peridot.I2CMaster","id":"static-method-new","meta":{"static":true}}],"code_type":"ext_define","id":"class-Peridot.I2CMaster","component":false,"superclasses":["Hardware.I2CMaster"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Hardware.I2CMaster' rel='Hardware.I2CMaster' class='docClass'>Hardware.I2CMaster</a><div class='subclass '><strong>Peridot.I2CMaster</strong></div></div></pre><div class='doc-contents'><p>I2C(Inter-Integrated Circuit)のマスター側コントローラを操作するクラスです。</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-channel' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Hardware.I2CMaster' rel='Hardware.I2CMaster' class='defined-in docClass'>Hardware.I2CMaster</a><br/></div><a href='#!/api/Hardware.I2CMaster-property-channel' class='name expandable'>channel</a> : <a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a><span class=\"signature\"><span class='readonly' >readonly</span></span></div><div class='description'><div class='short'><p>このインスタンスが割り当てられたコントローラのチャンネル番号を取得します。</p>\n</div><div class='long'><p>このインスタンスが割り当てられたコントローラのチャンネル番号を取得します。</p>\n</div></div></div><div id='property-clock' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Hardware.I2CMaster' rel='Hardware.I2CMaster' class='defined-in docClass'>Hardware.I2CMaster</a><br/></div><a href='#!/api/Hardware.I2CMaster-property-clock' class='name expandable'>clock</a> : <a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a><span class=\"signature\"></span></div><div class='description'><div class='short'>クロック周波数をHz単位で取得/設定します。 ...</div><div class='long'><p>クロック周波数をHz単位で取得/設定します。\n設定時は、コントローラが許容できるクロック周波数に合わせて、\n代入しようとした値を越えない最も近い値に補正されることがあります。\n取得時は、コントローラに設定された実際のクロック周波数が返ります。</p>\n<p>Defaults to: <code>100000</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-configure' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Hardware.I2CMaster' rel='Hardware.I2CMaster' class='defined-in docClass'>Hardware.I2CMaster</a><br/></div><a href='#!/api/Hardware.I2CMaster-method-configure' class='name expandable'>configure</a>( <span class='pre'>scl, sda</span> ) : <a href=\"#!/api/Hardware.I2CMaster\" rel=\"Hardware.I2CMaster\" class=\"docClass\">Hardware.I2CMaster</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>ピン割り当てを行います。 ...</div><div class='long'><p>ピン割り当てを行います。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>scl</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Symbol\" rel=\"Symbol\" class=\"docClass\">Symbol</a>/<a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a><div class='sub-desc'><p>クロック信号(SCL)の名称(例:\"D15\")または番号(例:15)。</p>\n</div></li><li><span class='pre'>sda</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Symbol\" rel=\"Symbol\" class=\"docClass\">Symbol</a>/<a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a><div class='sub-desc'><p>データ信号(SDA)の名称(例:\"D14\")または番号(例:14)。</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Hardware.I2CMaster\" rel=\"Hardware.I2CMaster\" class=\"docClass\">Hardware.I2CMaster</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-transfer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Hardware.I2CMaster' rel='Hardware.I2CMaster' class='defined-in docClass'>Hardware.I2CMaster</a><br/></div><a href='#!/api/Hardware.I2CMaster-method-transfer' class='name expandable'>transfer</a>( <span class='pre'>slave, txdata, [rxbytes]</span> ) : <a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a>[]<span class=\"signature\"></span></div><div class='description'><div class='short'>データの送受信を行います。 ...</div><div class='long'><p>データの送受信を行います。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>slave</span> : <a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a><div class='sub-desc'><p>スレーブアドレスを7-bitの整数値(0～127)で指定します。</p>\n</div></li><li><span class='pre'>txdata</span> : <a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a>[]/null<div class='sub-desc'><p>最初に送信するバイト列を指定します。各要素が0以上255以内の数値で構成された配列を渡します。\n       受信のみを行いたい場合、nullまたは空の配列を指定します。</p>\n</div></li><li><span class='pre'>rxbytes</span> : <a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a> (optional)<div class='sub-desc'><p>受信したいバイト数を指定します。送信終了後にここで指定したサイズを受信します。\n       スレーブからの応答によっては、受信データがここで指定したサイズ未満になる場合もあります。</p>\n<p>Defaults to: <code>0</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Integer\" rel=\"Integer\" class=\"docClass\">Integer</a>[]</span><div class='sub-desc'><p>受信したバイト列。各要素が0以上255以内の数値で構成された配列が返ります。</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-new' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Peridot.I2CMaster'>Peridot.I2CMaster</span><br/></div><a href='#!/api/Peridot.I2CMaster-static-method-new' class='name expandable'>new</a>( <span class='pre'></span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>インスタンスを生成します。olive構成では、生成できるインスタンスは最大1個です。 ...</div><div class='long'><p>インスタンスを生成します。olive構成では、生成できるインスタンスは最大1個です。\n引数が渡された場合、それを用いて新しいインスタンスの <a href=\"#!/api/Peridot.I2CMaster-method-configure\" rel=\"Peridot.I2CMaster-method-configure\" class=\"docClass\">configure</a> を呼び出します。</p>\n</div></div></div></div></div></div></div>","meta":{}});